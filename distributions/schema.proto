// Copyright (c) 2014, Salesforce.com, Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// - Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// - Neither the name of Salesforce.com nor the names of its contributors
//   may be used to endorse or promote products derived from this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
// TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package distributions_protobuf;

//----------------------------------------------------------------------------
// Clustering

message Clustering  // simulates a sum type
{
  message PitmanYor
  {
    required float alpha = 1;
    required float d = 2;
  }

  message LowEntropy
  {
    required uint64 dataset_size = 1;
  }

  optional PitmanYor pitman_yor = 1;
  optional LowEntropy low_entropy = 2;
}

//----------------------------------------------------------------------------
// Basic Models

message BetaBernoulli {
  required float alpha = 1;
  required float beta = 2;
}

message DirichletDiscrete {
  repeated float alphas = 1;
}

message DirichletProcessDiscrete {
  required float gamma = 1;
  required float alpha = 2;
  required float beta0 = 3;
  repeated float betas = 4;
}

message GammaPoisson {
  required float alpha = 1;
  required float beta = 2;
}

message NormalInverseChiSq {
  required float mu = 1;
  required float kappa = 2;
  required float sigmasq = 3;
  required float nu = 4;
}

//----------------------------------------------------------------------------
// Products

message ProductModel {
  optional Clustering clustering = 1;
  repeated BetaBernoulli bb = 2;
  repeated DirichletDiscrete dd = 3;  // must be in order of increasing dim
  repeated DirichletProcessDiscrete dpd = 4;
  repeated GammaPoisson gp = 5;
  repeated NormalInverseChiSq nich = 6;
}

message ProductValue {
  repeated bool observed = 1;
  repeated bool booleans = 2;  // including bb
  repeated uint32 counts = 3;  // including dd, dpd, gp
  repeated float reals = 4;  // including nich
}
